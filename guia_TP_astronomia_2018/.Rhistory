a[i] = i + 1
} else {
a[i] = i - 1
}
}
print(a)
a = vector()
a[1] = 1
for (i in 2:length(colorder)){
print(i)
if (i %% 2== 0){
a[i] = i + 1
} else {
a[i] = i - 1
}
}
print(a)
otv_final <- otv_final[,a]
View(otv_final)
# Aplica funcion que genera rad01 a todo Open Tv
ptv_short <-  ptv %>% select(-Weektemp) %>%
map_df(., function(x) radshort(x,r_ptv,dshort) )
# Emprolija y pone la fecha
ptv_short <- cbind.data.frame(ptv[,1],ptv_short) %>%
rename(Week = 'ptv[, 1]')
names(ptv_short) <-  c(names(ptv_short)[1],paste(names(ptv_short)[-1],"short",sep =" "))
# Aplica funcion que genera rad02 a todo Open Tv
ptv_long <-  ptv %>% select(-Weektemp) %>%
map_df(., function(x) radlong(x,r_ptv,dlong) )
# Emprolija y pone la fecha
ptv_long <- cbind.data.frame(ptv[,1],ptv_long) %>%
rename(Week = 'ptv[, 1]')
names(ptv_long) <-  c(names(ptv_long)[1],paste(names(ptv_long)[-1],"long",sep =" "))
# Juntas short y long
ptv_long <- ptv_long %>% select(-Week)
ptv_final <- cbind.data.frame(ptv_short, ptv_long)
# Orden de las columnas para que quede armadito
colorder <- names(ptv_final)[-1]
colorder <- colorder %>%
as.data.frame()
names(colorder) = "vars"
colorder <- colorder %>%
arrange(vars) %>%
transmute(., vars = as.character(vars)) %>%
unlist
View(ptv_final)
a = vector()
a[1] = 1
for (i in 2:length(colorder)){
print(i)
if (i %% 2== 0){
a[i] = i + 1
} else {
a[i] = i - 1
}
}
ptv_final <- ptv_final[,c("Week",as.character(colorder))]
glimpse(ptv_final)
ptv_final <- ptv_final[,a]
write.csv(otv_final,file = "procesados/otv_aux.csv",sep = ",")
write.csv(otv_final,file = "procesados/otv_aux.csv")
otv_mapping <- names(otv_final)[-1]
otv_mapping <- as.data.frame(names(otv_final)[-1])
View(otv_mapping)
otv_mapping <- cbind(row(otv_mapping),otv_mapping)
View(otv_mapping)
otv_mapping <- as.data.frame(names(otv_final)[-1])
otv_mapping <- cbind(row(otv_mapping)+1000,otv_mapping)
View(otv_mapping)
otv_mapping <- cbind.data.frame(var = row(otv_mapping)+1000,variabledesc = otv_mapping)
otv_mapping <- as.data.frame(names(otv_final)[-1])
otv_mapping <- cbind.data.frame(var = row(otv_mapping)+1000,variabledesc = otv_mapping)
View(otv_mapping)
otv_mapping <- as.data.frame(names(otv_final)[-1])
otv_mapping <- cbind.data.frame(var = row(otv_mapping)+1000,variabledesc = otv_mapping)
View(otv_mapping)
otv_mapping <- as.data.frame(names(otv_final)[-1])
otv_mapping <- cbind.data.frame(var = row(otv_mapping)+1000,variabledesc = otv_mapping[,1])
View(otv_mapping)
otv_mapping <- as.data.frame(names(otv_final)[-1])
otv_mapping <- cbind.data.frame(var = paste0("mvar",row(otv_mapping)+1000),variabledesc = otv_mapping[,1])
ptv_mapping <- as.data.frame(names(ptv_final)[-1])
ptv_mapping <- cbind.data.frame(var = paste0("mvar",row(ptv_mapping)+ 1000 + nrow(otv_mapping)) ,variabledesc = ptv_mapping[,1])
View(otv_mapping)
View(otv_final)
View(otv_long)
View(ptv_final)
View(ptv_long)
View(ptv_short)
View(ptv_final)
print(colorder)
print(a)
summary(raw)
###########
dshort <- 0.54
dlong  <- 0.89
r_ptv  <- 0.797
r_ptv  <- 0.42
agrupadoras <- c("Campaign","Duration","Progtype","Position")
raw <- read.csv("GRPS Coca.-ActData18v6 csv.csv", stringsAsFactors = TRUE)
glimpse(raw)
names(raw) <- c("Week","Year","YTD","Campaign","TvType","Duration","Progtype","Position","GRPS")
glimpse(raw)
raw$Week <-  as.Date(raw$Week, "%m/%d/%Y")
summary(raw)
raw_otv <- raw %>% filter(TvType == "OTV")
raw_ptv <- raw %>% filter(TvType == "PTV")
# Loop
otv <- data.frame(Weektemp = unique(raw_otv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_otv, i )
otv <- cbind(otv, as.data.frame(temp_df))
}
ptv <- data.frame(Weektemp = unique(raw_ptv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_ptv, i )
ptv <- cbind(ptv, as.data.frame(temp_df))
}
# Aplica funcion que genera rad01 a todo Open Tv
otv_short <-  otv %>% select(-Weektemp) %>%
map_df(., function(x) radshort(x,r_otv,dshort) )
# Emprolija y pone la fecha
otv_short <- cbind.data.frame(otv[,1],otv_short) %>%
rename(Week = 'otv[, 1]')
names(otv_short) <-  c(names(otv_short)[1],paste(names(otv_short)[-1],"short",sep =" "))
# Aplica funcion que genera rad02 a todo Open Tv
otv_long <-  otv %>% select(-Weektemp) %>%
map_df(., function(x) radlong(x,r_otv,dlong) )
# Emprolija y pone la fecha
otv_long <- cbind.data.frame(otv[,1],otv_long) %>%
rename(Week = 'otv[, 1]')
names(otv_long) <-  c(names(otv_long)[1],paste(names(otv_long)[-1],"long",sep =" "))
# Juntas short y long
otv_long <- otv_long %>% select(-Week)
otv_final <- cbind.data.frame(otv_short, otv_long)
# Orden de las columnas para que quede armadito
colorder <- names(otv_final)[-1]
colorder <- colorder %>%
as.data.frame()
names(colorder) = "vars"
colorder <- colorder %>%
arrange(vars) %>%
transmute(., vars = as.character(vars)) %>%
unlist
# Short y long estan invertidos
# genera un vector que alterna las posiciones
a = vector()
a[1] = 1
for (i in 2:length(colorder)+1){
print(i)
if (i %% 2== 0){
a[i] = i + 1
} else {
a[i] = i - 1
}
}
print(a)
# Deja todo ordenadito
otv_final <- otv_final[,c("Week",as.character(colorder))]
glimpse(otv_final)
otv_final <- otv_final[,a]
glimpse(otv_final)
print(a)
# Short y long estan invertidos
# genera un vector que alterna las posiciones
a = vector()
a[1] = 1
for (i in 2:(length(colorder)+1)){
print(i)
if (i %% 2== 0){
a[i] = i + 1
} else {
a[i] = i - 1
}
}
print(a)
# Deja todo ordenadito
otv_final <- otv_final[,c("Week",as.character(colorder))]
glimpse(otv_final)
otv_final <- otv_final[,a]
write.csv(otv_final,file = "procesados/otv_aux.csv")
# Aplica funcion que genera rad01 a todo  PTv
ptv_short <-  ptv %>% select(-Weektemp) %>%
map_df(., function(x) radshort(x,r_ptv,dshort) )
# Emprolija y pone la fecha
ptv_short <- cbind.data.frame(ptv[,1],ptv_short) %>%
rename(Week = 'ptv[, 1]')
names(ptv_short) <-  c(names(ptv_short)[1],paste(names(ptv_short)[-1],"short",sep =" "))
# Aplica funcion que genera rad02 a todo Open Tv
ptv_long <-  ptv %>% select(-Weektemp) %>%
map_df(., function(x) radlong(x,r_ptv,dlong) )
# Emprolija y pone la fecha
ptv_long <- cbind.data.frame(ptv[,1],ptv_long) %>%
rename(Week = 'ptv[, 1]')
names(ptv_long) <-  c(names(ptv_long)[1],paste(names(ptv_long)[-1],"long",sep =" "))
# Juntas short y long
ptv_long <- ptv_long %>% select(-Week)
ptv_final <- cbind.data.frame(ptv_short, ptv_long)
# Orden de las columnas para que quede armadito
colorder <- names(ptv_final)[-1]
colorder <- colorder %>%
as.data.frame()
names(colorder) = "vars"
colorder <- colorder %>%
arrange(vars) %>%
transmute(., vars = as.character(vars)) %>%
unlist
a = vector()
a[1] = 1
for (i in 2:(length(colorder)+1)){
print(i)
if (i %% 2== 0){
a[i] = i + 1
} else {
a[i] = i - 1
}
}
print(a)
ptv_final <- ptv_final[,c("Week",as.character(colorder))]
glimpse(ptv_final)
ptv_final <- ptv_final[,a]
write.csv(ptv_final,file = "procesados/ptv_aux.csv")
otv_mapping <- as.data.frame(names(otv_final)[-1])
otv_mapping <- cbind.data.frame(var = paste0("mvar",row(otv_mapping)+1000),variabledesc = otv_mapping[,1])
ptv_mapping <- as.data.frame(names(ptv_final)[-1])
ptv_mapping <- cbind.data.frame(var = paste0("mvar",row(ptv_mapping)+ 1000 + nrow(otv_mapping)) ,variabledesc = ptv_mapping[,1])
View(otv_mapping)
View(ptv_mapping)
full_mapping <- rbind(otv_mapping, ptv_mapping)
View(full_mapping)
write.csv(full_mapping, file ="procesados/aux_mapping.csv")
write.csv(otv_final,file = "procesados/otv_aux.csv",row.names = FALSE)
write.csv(ptv_final,file = "procesados/ptv_aux.csv", row.names = FALSE)
names(otv_final)[-1]
names(otv_final) <- c("Week",otv_mapping[,1])
View(otv_final)
otv_mapping[,1]
names(otv_final) <- c("Week",as.character(otv_mapping[,1]))
View(otv_final)
names(ptv_final) <- c("Week",as.character(ptv_mapping[,1]))
View(ptv_final)
#################
file.exists("procesados/aux_mapping.csv")
#################
if (file.exists("procesados/aux_mapping.csv")) { print i }
#################
if (file.exists("procesados/aux_mapping.csv")) { print("pepe") }
#################
if (!file.exists("procesados/aux_mapping.csv")) { print("pepe") }
if (!file.exists("procesados/aux_mapping.csv")) {
otv_mapping <- as.data.frame(names(otv_final)[-1])
otv_mapping <- cbind.data.frame(var = paste0("mvar",row(otv_mapping)+1000),variabledesc = otv_mapping[,1])
ptv_mapping <- as.data.frame(names(ptv_final)[-1])
ptv_mapping <- cbind.data.frame(var = paste0("mvar",row(ptv_mapping)+ 1000 + nrow(otv_mapping)) ,variabledesc = ptv_mapping[,1])
full_mapping <- rbind(otv_mapping, ptv_mapping)
write.csv(full_mapping, file ="procesados/aux_mapping.csv")
names(otv_final) <- c("Week",as.character(otv_mapping[,1]))
names(ptv_final) <- c("Week",as.character(ptv_mapping[,1]))
}
library(knitr)
library(dplyr)
library(purrr)
source("funciones.R")
###########
dshort <- 0.54
dlong  <- 0.89
r_ptv  <- 0.797
r_ptv  <- 0.42
agrupadoras <- c("Campaign","Duration","Progtype","Position")
raw <- read.csv("GRPS Coca.-ActData18v6 csv.csv", stringsAsFactors = TRUE)
glimpse(raw)
names(raw) <- c("Week","Year","YTD","Campaign","TvType","Duration","Progtype","Position","GRPS")
glimpse(raw)
raw$Week <-  as.Date(raw$Week, "%m/%d/%Y")
summary(raw)
raw_otv <- raw %>% filter(TvType == "OTV")
raw_ptv <- raw %>% filter(TvType == "PTV")
# Loop
otv <- data.frame(Weektemp = unique(raw_otv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_otv, i )
otv <- cbind(otv, as.data.frame(temp_df))
}
ptv <- data.frame(Weektemp = unique(raw_ptv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_ptv, i )
ptv <- cbind(ptv, as.data.frame(temp_df))
}
library(knitr)
library(dplyr)
library(purrr)
source("funciones.R")
###########
dshort <- 0.54
dlong  <- 0.89
r_ptv  <- 0.797
r_ptv  <- 0.42
agrupadoras <- c("Campaign","Duration","Progtype","Position")
raw <- read.csv("GRPS Coca.-ActData18v6 csv.csv", stringsAsFactors = TRUE)
glimpse(raw)
names(raw) <- c("Week","Year","YTD","Campaign","TvType","Duration","Progtype","Position","GRPS")
glimpse(raw)
raw$Week <-  as.Date(raw$Week, "%m/%d/%Y")
summary(raw)
raw_otv <- raw %>% filter(TvType == "OTV")
raw_ptv <- raw %>% filter(TvType == "PTV")
View(raw_otv)
View(raw_ptv)
# Loop
otv <- data.frame(Weektemp = unique(raw_otv$Week)) %>%
arrange(Weektemp)
View(otv)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_otv, i )
otv <- cbind(otv, as.data.frame(temp_df))
}
ptv <- data.frame(Weektemp = unique(raw_ptv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_ptv, i )
ptv <- cbind(ptv, as.data.frame(temp_df))
}
View(ptv)
# Aplica funcion que genera rad01 a todo Open Tv
otv_short <-  otv %>% select(-Weektemp) %>%
map_df(., function(x) radshort(x,r_otv,dshort) )
# Emprolija y pone la fecha
otv_short <- cbind.data.frame(otv[,1],otv_short) %>%
rename(Week = 'otv[, 1]')
# Loop
otv <- data.frame(Weektemp = unique(raw_otv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_otv, i )
otv <- cbind(otv, as.data.frame(temp_df))
}
ptv <- data.frame(Weektemp = unique(raw_ptv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_ptv, i )
ptv <- cbind(ptv, as.data.frame(temp_df))
}
# Aplica funcion que genera rad01 a todo Open Tv
otv_short <-  otv %>% select(-Weektemp) %>%
map_df(., function(x) radshort(x,r_otv,dshort) )
# Emprolija y pone la fecha
otv_short <- cbind.data.frame(otv[,1],otv_short) %>%
rename(Week = 'otv[, 1]')
library(knitr)
library(dplyr)
library(purrr)
source("funciones.R")
###########
dshort <- 0.54
dlong  <- 0.89
r_ptv  <- 0.797
r_ptv  <- 0.42
agrupadoras <- c("Campaign","Duration","Progtype","Position")
raw <- read.csv("GRPS Coca.-ActData18v6 csv.csv", stringsAsFactors = TRUE)
glimpse(raw)
names(raw) <- c("Week","Year","YTD","Campaign","TvType","Duration","Progtype","Position","GRPS")
glimpse(raw)
raw$Week <-  as.Date(raw$Week, "%m/%d/%Y")
summary(raw)
raw_otv <- raw %>% filter(TvType == "OTV")
raw_ptv <- raw %>% filter(TvType == "PTV")
# Loop
otv <- data.frame(Weektemp = unique(raw_otv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_otv, i )
otv <- cbind(otv, as.data.frame(temp_df))
}
ptv <- data.frame(Weektemp = unique(raw_ptv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_ptv, i )
ptv <- cbind(ptv, as.data.frame(temp_df))
}
# Aplica funcion que genera rad01 a todo Open Tv
otv_short <-  otv %>% select(-Weektemp) %>%
map_df(., function(x) radshort(x,r_otv,dshort) )
# Emprolija y pone la fecha
otv_short <- cbind.data.frame(otv[,1],otv_short) %>%
rename(Week = 'otv[, 1]')
r_otv  <- 0.42
library(knitr)
library(dplyr)
library(purrr)
source("funciones.R")
###########
dshort <- 0.54
dlong  <- 0.89
r_otv  <- 0.797
r_ptv  <- 0.42
agrupadoras <- c("Campaign","Duration","Progtype","Position")
raw <- read.csv("GRPS Coca.-ActData18v6 csv.csv", stringsAsFactors = TRUE)
glimpse(raw)
names(raw) <- c("Week","Year","YTD","Campaign","TvType","Duration","Progtype","Position","GRPS")
glimpse(raw)
raw$Week <-  as.Date(raw$Week, "%m/%d/%Y")
summary(raw)
raw_otv <- raw %>% filter(TvType == "OTV")
raw_ptv <- raw %>% filter(TvType == "PTV")
# Loop
otv <- data.frame(Weektemp = unique(raw_otv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_otv, i )
otv <- cbind(otv, as.data.frame(temp_df))
}
ptv <- data.frame(Weektemp = unique(raw_ptv$Week)) %>%
arrange(Weektemp)
for (i in agrupadoras){
temp_df <- createMediaVars(raw_ptv, i )
ptv <- cbind(ptv, as.data.frame(temp_df))
}
# Aplica funcion que genera rad01 a todo Open Tv
otv_short <-  otv %>% select(-Weektemp) %>%
map_df(., function(x) radshort(x,r_otv,dshort) )
# Emprolija y pone la fecha
otv_short <- cbind.data.frame(otv[,1],otv_short) %>%
rename(Week = 'otv[, 1]')
names(otv_short) <-  c(names(otv_short)[1],paste(names(otv_short)[-1],"short",sep =" "))
# Aplica funcion que genera rad02 a todo Open Tv
otv_long <-  otv %>% select(-Weektemp) %>%
map_df(., function(x) radlong(x,r_otv,dlong) )
# Emprolija y pone la fecha
otv_long <- cbind.data.frame(otv[,1],otv_long) %>%
rename(Week = 'otv[, 1]')
names(otv_long) <-  c(names(otv_long)[1],paste(names(otv_long)[-1],"long",sep =" "))
# Juntas short y long
otv_long <- otv_long %>% select(-Week)
otv_final <- cbind.data.frame(otv_short, otv_long)
# Orden de las columnas para que quede armadito
colorder <- names(otv_final)[-1]
colorder <- colorder %>%
as.data.frame()
names(colorder) = "vars"
colorder <- colorder %>%
arrange(vars) %>%
transmute(., vars = as.character(vars)) %>%
unlist
# Short y long estan invertidos
# genera un vector que alterna las posiciones
a = vector()
a[1] = 1
for (i in 2:(length(colorder)+1)){
print(i)
if (i %% 2== 0){
a[i] = i + 1
} else {
a[i] = i - 1
}
}
print(a)
# Deja todo ordenadito
otv_final <- otv_final[,c("Week",as.character(colorder))]
glimpse(otv_final)
otv_final <- otv_final[,a]
write.csv(otv_final,file = "procesados/otv_aux.csv",row.names = FALSE)
library(cluster)
library(MASS)
library(cluster)
library(MASS)
# install.packages("fpc")
library(fpc)
# install.packages("dplyr")
library(dplyr)
# install.packages("ggplot2")
library(ggplot2)
# install.packages("stringr")
library(stringr)
getwd()
setwd("C:/Users/loda7002/Downloads")
setwd("C:/Users/loda7002/Downloads/guia_TP_astronomia_2018")
encuesta = as.data.frame(read.table("wiki4HE.csv",header = TRUE, sep = ";" , stringsAsFactors = FALSE))
dim(encuesta)
str(encuesta[1:10])
contar_na <- function(x) length(str_which(x, "\\?"))   #Funciones abreviadas
recuento_na <- sapply(encuesta, contar_na)
#Para cada una de las variables cuantos datos faltantes hay
sort(recuento_na, decreasing = T)
convertir_na <- function(x, na_symbol = "?"){
if(typeof(x) == "character"){
x[ x == na_symbol ] <- NA
}
return(as.numeric(x))
}
#Nuevo DataSet con los NA correspondientes:
encuesta_2 <- as.data.frame( sapply(encuesta, convertir_na) )
encuesta_2$GENDER <- factor( ifelse(encuesta_2$GENDER == 1, "F", "M") )
domain_labels <- c("Arts_Humanities", "Sciences", "Health_Sciences","Engineering_Architecture", "Law", "Political_Sciences")
encuesta_2$DOMAIN <- factor(encuesta_2$DOMAIN, labels = domain_labels )
pos_labels = c("Professor", "Associate", "Assistant", "Lecturer", "Instructor", "Adjunct")
encuesta_2$UOC_POSITION <- factor(encuesta_2$UOC_POSITION, labels = pos_labels)
encuesta_2$OTHERSTATUS <- factor(encuesta_2$OTHERSTATUS) # Queda codificado como númenro porque los nombres de categorías no coinciden con el número de categorías
encuesta_2$UNIVERSITY <- factor( ifelse(encuesta_2$UNIVERSITY == 1, "UOC", "UPF"))
encuesta_2$PhD <- as.logical(encuesta_2$PhD)
encuesta_2$USERWIKI <- as.logical(as.numeric(encuesta_2$USERWIKI))
encuesta_2$OTHER_POSITION <- if_else(encuesta_2$OTHER_POSITION == 1, TRUE, FALSE, NA)  #if_else permite dar valor a los faltantes con el ultimo parametro
encuesta_uoc <- encuesta_2 %>%
filter(UNIVERSITY == "UOC") %>% select(-UNIVERSITY)
table(complete.cases(encuesta_uoc)) #Casos sin NA por filas
table(sapply(encuesta_uoc, anyNA)) #Casos NA por variable
encuesta_uoc$OTHER_POSITION <- NULL
encuesta_uoc$Vis2 <- NULL
encuesta_uoc$PEU3 <- NULL
